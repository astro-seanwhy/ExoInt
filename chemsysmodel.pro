Function chemsysmodel, planetabuN, outinfull=outinfull
TIC
;;;;;;DO NOT MODIFY THIS CODE, WITHOUT THE PERMISSION OF THE CREATER
;;;;;;A Geo-&Cosmo-model [CODE-3] for estimating rocky exoplanetary
;;composition and structures: mantle and core composition, core mass fraction, core radius.
;;Created and maintained by Haiyang S. Wang
;;Citation: Wang, H. S., Liu, F., Ireland, T., Brasser, R., Yong, D.,
;;and Lineweaver, C. H. 2019. Enhanced constraints on the interior
;;composition and structure of terrestrial exoplanets. MNRAS 482:2222-2233. doi.org/10.1093/mnras/sty2749

Nelems=83
nan=!values.f_nan
secondaryOxidizeslable='NO' ;; if do secondary oxidizes: TiO2, Cr2O3, MnO, K2O, and P2O5. 
 ;; YES OR NO to consider metals and graphite/diamond in the mantle and un-oxidized Si into the core. 
SiO2firstlable='YES'
SiIncorelable='NO'
;Oincorelable='YES'
Extramodellable='YES'

Nmc=1e5


readcol, 'data/atomwttc_new.txt', F='I,A,F,F', atomid, elemid, atomwt, elemtc
for i=0, Nelems-1 do begin
 if elemid[i] eq 'C' then nC=i
 if elemid[i] eq 'O' then nO=i
 if elemid[i] eq 'S' then nS=i
 if elemid[i] eq 'Hg' then nHg=i
 if elemid[i] eq 'Na' then nNa=i
 if elemid[i] eq 'Si' then nSi=i
 if elemid[i] eq 'Fe' then nFe=i
 if elemid[i] eq 'Mg' then nMg=i
 if elemid[i] eq 'Ca' then nCa=i
 if elemid[i] eq 'Ti' then nTi=i
 if elemid[i] eq 'Al' then nAl=i
 if elemid[i] eq 'Cr' then nCr=i
 if elemid[i] eq 'Mn' then nMn=i
 if elemid[i] eq 'Ni' then nNi=i
 if elemid[i] eq 'K' then nK=i
 if elemid[i] eq 'P' then nP=i
endfor

;;process the planetabuN, in which the negative abundance
;;(e.g. generated by MC occasionally) may be set as N/A
planetabuN(where(planetabuN LT 0.))=nan  ;;the negative abundance randomly generated by Gaussian distribution is unrealistic, and thus set to be nan then. 
Nvalc=1 ;; initially set number of groups of results, to be updated upon the random distribution of Fe, Ni, and S in the mantle and the core
;;;;set the limits of NiO and SO4 firstly
coreFe2NiUL=18 + 4. ;; Assume 17.6 +/-4 is drawn from the distribution of Fe/Ni in the more than 5000 stars of Hypatia. Assume 17 +/- 1 as the range of ratio of Fe to Ni in the core, based on McDonough 2017 and personal communication with McDonough. 
coreFe2NiLL=18 - 4. 

;;preset the C (graphite/diamond) in mantle, metals (could be All, but
;;Si and S, of elements considered here) in mantle
CmantleN=nan ;; Graphite/diamond in mantle
MetalN=nan   ;; metals (non-oxides) in the mantle
MetalName=nan
Metalwt=nan
SinativeN=nan
OnativeN=nan
ExtraO=nan


;;start the run
planetN_C2O=planetabuN[nC] / planetabuN[nO]
IF planetN_C2O ge 0.8 THEN BEGIN
print, 'Carbide Planet !!'
print, 'It may form CO, SiC, Mg2C, Fe3C, and CaC2... beyond the scope of a silicate planet!'
print, 'Calculation is DISMISSED; N/A Results for all are returned'
compsname=['SiO2', 'MgO', 'FeO', 'Al2O3', 'CaO', 'Na2O',  'NiO', 'SO3', 'CO2', 'C'] ;;['SiO2', 'CaO', 'Na2O', 'MgO', 'Al2O3', 'FeO', 'NiO', 'SO4', 'CO2', 'C'] 
IF secondaryOxidizeslable EQ 'YES ' THEN compsname=['SiO2', 'K2O', 'CaO', 'Na2O', 'MgO', 'Al2O3', 'MnO', 'Cr2O3', 'TiO2', 'P2O5', 'FeO', 'NiO', 'SO3', 'CO2', 'C']
if Extramodellable eq 'YES' then compsname=[compsname, 'Metals', 'ExtraO']
;, 'ExtraC', 'Metals', 'ExtraO']
corecompsname=['Fe', 'Ni', 'S'];, 'Si']   
;if Extramodellable eq 'YES' then corecompsname=[corecompsname, 'Si']
mantlecompsmassfra=replicate(nan, n_elements(compsname)) ;;9; 14 is the total mantle compounds number as designed, changable 
corecompsmassfra=replicate(nan, n_elements(corecompsname)) ;; 3 is the total core compounds assumed, changable
fcoremass=nan
goto, outputresults
ENDIF

;;;;;>>>pre-set the arrays for two cases (i.e. when S is available but
;;;;;assumed all in mantle or all in core) 

;;OTHERWISE: SILICATE PLANET
;;do the order of ease of oxidation of metals, while put CO and SiO2 at the first
IF SiO2firstlable eq 'YES' THEN BEGIN
compsname=['SiO2']
compswt=[atomwt[nSi]+atomwt[nO]*2.]
compsabu=[planetabuN[nSi]]

planetOleft=planetabuN[nO] - planetabuN[nSi]*2.
if planetOleft le 0 then compsabu=compsabu + planetOleft/2. ;;;reduce the oxidize by the normalized amount of insuffici

compsmolarmass=compsabu*compswt

if planetOleft le 0 then begin
print, 'O has been used up after '
print,  compsname
mantletotalmolarmass=total(compsmolarmass, /nan)
mantlecompsmassfra=compsmolarmass/mantletotalmolarmass
metalN=[planetabuN[nCa], planetabuN[nNa], planetabuN[nMg], planetabuN[nAl]]
metalwt=[atomwt[nCa], atomwt[nNa], atomwt[nMg], atomwt[nAl]]
metalName=['Ca', 'Na', 'Mg', 'Al']
SinativeN=planetabuN[nSi] - compsabu
goto, modelcore
endif 
ENDIF


If secondaryoxidizeslable eq 'YES' and finite(planetabuN[nK]) eq 1 Then Begin
compsname=[compsname, 'K2O']
compswt=[atomwt[nK]*2. + atomwt[nO]]
mantleK2Oabu=planetabuN[nK]/2.
compsabu=[mantleK2Oabu]
planetOleft=planetOleft - mantleK2Oabu
if planetOleft le 0 then compsabu= compsabu + planetOleft
compsmolarmass=[compsmolarmass, compsabu*compswt]
;
if planetOleft le 0 then begin
print, 'O has been used up after '
print,  compsname
mantletotalmolarmass=total(compsmolarmass, /nan)
mantlecompsmassfra=compsmolarmass/mantletotalmolarmass
IF SiO2firstlable ne 'YES' then SinativeN=planetabuN[nSi]
goto, modelcore
endif 
Endif

IF SiO2firstlable eq 'YES' THEN BEGIN

If finite(planetabuN[nCa]) eq 1 Then Begin
compsname=[compsname, 'CaO']
mantleCaOabu=planetabuN[nCa]
;if finite(planetabuN[nCa]) eq 0 then mantleCaOabu=0.
compswt=[atomwt[nCa]+atomwt[nO]]
compsabu=[mantleCaOabu]
planetOleft=planetOleft - mantleCaOabu
if planetOleft le 0 then compsabu= compsabu + planetOleft
compsmolarmass=[compsmolarmass, compsabu*compswt]
;
if planetOleft le 0 then begin
print, 'O has been used up after: '
print, compsname
mantletotalmolarmass=total(compsmolarmass, /nan)
mantlecompsmassfra=compsmolarmass/mantletotalmolarmass
metalN=[planetabuN[nCa] - compsabu, planetabuN[nNa], planetabuN[nMg], planetabuN[nAl]]
metalwt=[atomwt[nCa], atomwt[nNa], atomwt[nMg], atomwt[nAl]]
metalName=['Ca', 'Na', 'Mg', 'Al']
;compsname=[compsname, 'Metals']
IF SiO2firstlable ne 'YES' then SinativeN=planetabuN[nSi]
goto, modelcore
endif
Endif

ENDIF ELSE BEGIN

If finite(planetabuN[nCa]) eq 1 Then begin ;;as the first
compsname='CaO'
mantleCaOabu=planetabuN[nCa]
;if finite(planetabuN[nCa]) eq 0 then mantleCaOabu=0.
compswt=[atomwt[nCa]+atomwt[nO]]
compsabu=[mantleCaOabu]
planetOleft=planetabuN[nO] - mantleCaOabu
if planetOleft le 0 then compsabu= compsabu + planetOleft
compsmolarmass=compsabu*compswt
;
if planetOleft le 0 then begin
print, 'O has been used up after: '
print, compsname
mantletotalmolarmass=total(compsmolarmass, /nan)
mantlecompsmassfra=compsmolarmass/mantletotalmolarmass
metalN=[planetabuN[nCa] - compsabu, planetabuN[nNa], planetabuN[nMg], planetabuN[nAl]]
metalwt=[atomwt[nCa], atomwt[nNa], atomwt[nMg], atomwt[nAl]]
metalName=['Ca', 'Na', 'Mg', 'Al']
;compsname=[compsname, 'Metals']
IF SiO2firstlable ne 'YES' then SinativeN=planetabuN[nSi]
;stop
goto, modelcore
endif
Endif Else Begin
compsname=!null
compsmolarmass=!null
planetOleft=planetabuN[nO]
Endelse
ENDELSE

If finite(planetabuN[nNa]) eq 1 Then Begin
compsname=[compsname, 'Na2O']
compswt=[atomwt[nNa]*2. + atomwt[nO]]
mantleNa2Oabu=planetabuN[nNa]/2.
compsabu=[mantleNa2Oabu]
planetOleft=planetOleft - mantleNa2Oabu
if planetOleft le 0 then compsabu=compsabu + planetOleft
compsmolarmass=[compsmolarmass, compsabu*compswt]
;
if planetOleft le 0 then begin
print, 'O has been used up after: '
print,  compsname
mantletotalmolarmass=total(compsmolarmass, /nan)
mantlecompsmassfra=compsmolarmass/mantletotalmolarmass
metalN=[planetabuN[nNa]-compsabu*2., planetabuN[nMg], planetabuN[nAl]]
metalwt=[atomwt[nNa], atomwt[nMg], atomwt[nAl]]
metalName=['Na', 'Mg', 'Al']
;compsname=[compsname, 'Metals']
IF SiO2firstlable ne 'YES' then SinativeN=planetabuN[nSi]
goto, modelcore
endif 
Endif

compsname=[compsname, 'MgO']
compswt=[atomwt[nMg]+atomwt[nO]]
compsabu=[planetabuN[nMg]]
planetOleft=planetOleft - planetabuN[nMg]
if planetOleft le 0 then compsabu=compsabu + planetOleft
compsmolarmass=[compsmolarmass, compsabu*compswt]
;
if planetOleft le 0 then begin
print, 'O has been used up after '
print,  compsname
mantletotalmolarmass=total(compsmolarmass, /nan)
mantlecompsmassfra=compsmolarmass/mantletotalmolarmass
metalN=[planetabuN[nMg]-compsabu, planetabuN[nAl]]
metalwt=[atomwt[nMg], atomwt[nAl]]
metalName=['Mg', 'Al']
;compsname=[compsname, 'Metals']
IF SiO2firstlable ne 'YES' then SinativeN=planetabuN[nSi]
goto, modelcore
endif 

If finite(planetabuN[nAl]) eq 1 Then Begin
compsname=[compsname, 'Al2O3']
compswt=[atomwt[nAl]*2. + atomwt[nO]*3.]
mantleAl2O3abu=planetabuN[nAl]/2.
;if finite(planetabuN[nAl]) eq 0 then mantleAl2O3abu=0.
compsabu=[mantleAl2O3abu]
planetOleft=planetOleft - mantleAl2O3abu*3.
if planetOleft le 0 then compsabu=compsabu + planetOleft/3.
compsmolarmass=[compsmolarmass, compsabu*compswt]
;
if planetOleft le 0 then begin
print, 'O has been used up after: '
print, compsname
mantletotalmolarmass=total(compsmolarmass, /nan)
mantlecompsmassfra=compsmolarmass/mantletotalmolarmass
metalN=[planetabuN[nAl]-compsabu*2.]
metalwt=[atomwt[nAl]]
metalName=['Al']
;compsname=[compsname, 'Metals']
IF SiO2firstlable ne 'YES' then SinativeN=planetabuN[nSi]
goto, modelcore
endif 
Endif

IF SiO2firstlable ne 'YES' THEN BEGIN
If finite(planetabuN[nSi]) eq 1 Then Begin
compsname=[compsname, 'SiO2']
compswt=[atomwt[nSi]+atomwt[nO]*2.]
compsabu=[planetabuN[nSi]]

planetOleft=planetOleft - planetabuN[nSi]*2.
if planetOleft le 0 then compsabu=compsabu + planetOleft/2. ;;;reduce the oxidize by the normalized amount of insuffici

compsmolarmass=[compsmolarmass, compsabu*compswt]

if planetOleft le 0 then begin
print, 'O has been used up after '
print,  compsname
mantletotalmolarmass=total(compsmolarmass, /nan)
mantlecompsmassfra=compsmolarmass/mantletotalmolarmass
SinativeN=planetabuN[nSi] - compsabu
print, 'SinativeN:', SinativeN
goto, modelcore
endif 
Endif
ENDIF



If secondaryOxidizeslable eq 'YES' AND finite(planetabuN[nMn]) eq 1 Then Begin
compsname=[compsname, 'MnO']
compswt=[atomwt[nMn] + atomwt[nO]]
mantleMnOabu=planetabuN[nMn]
compsabu=[mantleMnOabu]
planetOleft=planetOleft - mantleMnOabu
if planetOleft le 0 then compsabu=compsabu + planetOleft
compsmolarmass=[compsmolarmass, compsabu*compswt]
;
if planetOleft le 0 then begin
print, 'O has been used up after '
print,  compsname
mantletotalmolarmass=total(compsmolarmass, /nan)
mantlecompsmassfra=compsmolarmass/mantletotalmolarmass
goto, modelcore
endif 
Endif

If secondaryOxidizeslable eq 'YES' AND finite(planetabuN[nCr]) eq 1 Then Begin
compsname=[compsname, 'Cr2O3']
compswt=[atomwt[nCr]*2. + atomwt[nO]*3.]
mantleCr2O3abu=planetabuN[nCr]/2.
compsabu=[mantleCr2O3abu]
planetOleft=planetOleft - mantleCr2O3abu*3.
if planetOleft le 0 then compsabu=compsabu + planetOleft/3.
compsmolarmass=[compsmolarmass, compsabu*compswt]
;
if planetOleft le 0 then begin
print, 'O has been used up after: ' 
print, compsname
mantletotalmolarmass=total(compsmolarmass, /nan)
mantlecompsmassfra=compsmolarmass/mantletotalmolarmass
;stop
goto, modelcore
endif 
Endif


IF secondaryOxidizeslable eq 'YES' THEN BEGIN
;;;;FOR Ti and P, their ease of oxidation is unclear yet; I'd
;;;; check with Trevor et al.
If finite(planetabuN[nTi]) eq 1 Then Begin
compsname=[compsname, 'TiO2']
compswt=[atomwt[nTi] + atomwt[nO]*2.]
mantleTiO2abu=planetabuN[nTi]
compsabu=[mantleTiO2abu]
planetOleft=planetOleft - mantleTiO2abu*2.
if planetOleft le 0 then compsabu=compsabu + planetOleft/2.
compsmolarmass=[compsmolarmass, compsabu*compswt]
;
if planetOleft le 0 then begin
print, 'O has been used up after: '
print, compsname
mantletotalmolarmass=total(compsmolarmass, /nan)
mantlecompsmassfra=compsmolarmass/mantletotalmolarmass
goto, modelcore
endif 
Endif

If finite(planetabuN[nP]) eq 1 Then Begin
compsname=[compsname, 'P2O5']
compswt=[atomwt[nP]*2. + atomwt[nO]*5.]
mantleP2O5abu=planetabuN[nP]/2.
compsabu=[mantleP2O5abu]
planetOleft=planetOleft - mantleP2O5abu*5.
if planetOleft le 0 then compsabu=compsabu + planetOleft/5.
compsmolarmass=[compsmolarmass, compsabu*compswt]
;
if planetOleft le 0 then begin
print, 'O has been used up after '
print,  compsname
mantletotalmolarmass=total(compsmolarmass, /nan)
mantlecompsmassfra=compsmolarmass/mantletotalmolarmass
goto, modelcore
endif 
Endif

ENDIF

Nlithos=N_ELEMENTS(compsname)

;;;>>>ASSUME ALL O LEFT WOULD BE CONSUMED UP BY Fe, Ni, and/or S. 
Nmc=Nmc ;; sampling numbers of MC
NiOmax=planetabuN[nNi] ;; it is fair considering >90% Ni into the core, in the Earth, McDonough 2017
NiOmin=0. 
sulfmax=planetabuN[nS] ;; it is fair considering >95% S into the core, in the Earth, McDonough 2017
sulfmin=0.

;;;surfur is processed together with Fe and Ni (the two should be always bounded together, as their cosmochemical ratio of 17 in various meteorites) 
CASE finite(planetabuN[nS]) OF 
0: BEGIN  ;; NO S 
print, 'Planet has NO S...'
compsname=[compsname, 'FeO', 'NiO'] ;;assume Fe and Ni consumming all O left
corecompsname=['Fe', 'Ni']
;Nmantlecomps=N_ELEMENTS(compsname)
;Ncorecomps=N_ELEMENTS(corecompsname)

IF planetOleft ge total([planetabuN[nFe], planetabuN[nNi]], /nan) THEN BEGIN ;;ASSUME METALS TO BE OXIDIZED IF THERE IS ENGOUGH OXYGEN. 
planetOleft_res=planetOleft-total([planetabuN[nFe], planetabuN[nNi]], /nan)
mantleFeOabu=planetabuN[nFe]
mantleNiOabu=planetabuN[nNi]

compsabu=[mantleFeOabu, mantleNiOabu]
compswt=[atomwt[nFe]+atomwt[nO], atomwt[nNi] + atomwt[nO]]
compsmolarmass=[compsmolarmass, compsabu*compswt]

;;;>>>>>C as either CO2 or otherwise graphite/kerogen/diamond
compsname=[compsname, 'CO2']
compsabu=planetabuN[nC]
compswt=atomwt[nC] + atomwt[nO]*2.
planetOleft_res2=planetOleft_res - planetabuN[nC]*2.
if planetOleft_res2 le 0 then begin 
compsabu=planetabuN[nC] + planetOleft_res2/2.
print, 'O has been used up after '
print,  compsname
;;C in the form of graphite/diamond
compsname=[compsname, 'C']
compsabuC=planetabuN[nC] - compsabu
compsmolarmass=[compsmolarmass,  compsabu*compswt, compsabuC*atomwt[nC]]
;goto, modelcore
print, 'A CoreLess planet!, with the leftover O atoms of', 0
endif else begin 
compsmolarmass=[compsmolarmass, compsabu*compswt]
IF Extramodellable eq 'YES' THEN BEGIN
compsname=[compsname, 'ExtraO']
compsmolarmass=[compsmolarmass, planetOleft_res2*atomwt[nO]]
ENDIF
print, 'A CoreLess planet!, with the leftover O atoms of', planetOleft_res2
endelse

mantletotalmolarmass=total(compsmolarmass, /nan)
mantlecompsmassfra=compsmolarmass/mantletotalmolarmass


corecompsname=['N/A']
corecompsmassfra=nan
fcoremass=0.
goto, chemsysdone
ENDIF ELSE BEGIN
mantleNiOabuarr=NiOmin + (NiOmax-NiOmin)*randomu(seed, Nmc)  ;;;legitimate to assume uniform distribution, as the values between the max and min could be equally possible. 
mantleFeOabuarr=planetOleft - mantleNiOabuarr
;;>>>Validity Control 1. Important!
inval_id1=where(mantleFeOabuarr lt 0.)
if where(inval_id1 eq -1) eq -1 then begin ;;namely, exclude the case inval_id1= -1, namely, not fit to the conditions
mantleFeOabuarr(inval_id1)=nan ;; FeO cannot be negative 
mantleNiOabuarr(inval_id1)=nan ;; the amount of NiO making FeO to be negative is also invalid. 
endif 

;;CORE
coreNiabuarr=planetabuN[nNi] - mantleNioabuarr
coreFeabuarr=planetabuN[nFe] - mantleFeOabuarr

;;>>>Validity Control 2. Important!
coreFe2Niarr=coreFeabuarr/coreNiabuarr
inval_id2=where(coreFe2Niarr lt coreFe2NiLL OR coreFe2Niarr gt coreFe2NiUL)
if where(inval_id2 eq -1) eq -1 then begin
coreFe2Niarr(inval_id2)=nan
;;thus the corresponding abundances are also invalid
coreNiabuarr(inval_id2)=nan
coreFeabuarr(inval_id2)=nan
mantleNiOabuarr(inval_id2)=nan
mantleFeOabuarr(inval_id2)=nan
endif
;;

val_id=where(finite(mantleFeOabuarr) eq 1, Nval) ;;FeO is the most stable reference as Fe must be present in planetabuN
print, 'Numbers of valid guess for Fe and Ni in the mantle and the core:', Nval, ' of', Nmc

;;extract the valid arrays only 
if Nval eq 0 then begin
mantleFeOabuarrc=nan
mantleNiOabuarrc=nan
coreNiabuarrc=nan
coreFeabuarrc=nan
;;remove all invalid
compsmolarmass=replicate(nan, Nlithos)

Nvalc=Nval+1
endif else begin
mantleFeOabuarrc=mantleFeOabuarr(val_id)
mantleNiOabuarrc=mantleNiOabuarr(val_id)
coreNiabuarrc=coreNiabuarr(val_id)
coreFeabuarrc=coreFeabuarr(val_id)
Nvalc=Nval
endelse

;;Conver to molar mass
FeOmolarmassarr=mantleFeOabuarrc*(atomwt[nFe]+atomwt[nO])
NiOmolarmassarr=mantleNiOabuarrc*(atomwt[nNi]+atomwt[nO])
nonLITHOmassarr=[[FeOmolarmassarr], [NiOmolarmassarr]]

coreFemolarmassarr=coreFeabuarrc*atomwt[nFe]
coreNimolarmassarr=coreNiabuarrc*atomwt[nNi]
coremolarmass=[[coreFemolarmassarr], [coreNimolarmassarr]]

;;All C in the mantle
compsabuC=planetabuN[nC]
compsCmolarmass=compsabuC*atomwt[nC]
compsname=[compsname, 'C']
ENDELSE

END

1: BEGIN ;; IF THERE IS SULPHUR
print, 'Planet has S...'
compsname=[compsname, 'FeO', 'NiO', 'SO3'] ;;assume Fe, Ni, and S consumming all O left
corecompsname=['Fe', 'Ni', 'S']
;Nmantlecomps=N_ELEMENTS(compsname)
;Ncorecomps=N_ELEMENTS(corecompsname)

IF planetOleft ge total([planetabuN[nFe], planetabuN[nNi], planetabuN[nS]*3.], /nan) THEN BEGIN ;;ASSUME METALS TO BE OXIDIZED IF THERE IS ENGOUGH OXYGEN. 

planetOleft_res=planetOleft-total([planetabuN[nFe], planetabuN[nNi], planetabuN[nS]*3.], /nan)
mantleFeOabu=planetabuN[nFe]
mantleNiOabu=planetabuN[nNi]
mantleSO2abu=planetabuN[nS]

compsabu=[mantleFeOabu, mantleNiOabu, mantleSO2abu]
compswt=[atomwt[nFe]+atomwt[nO], atomwt[nNi] + atomwt[nO], atomwt[nS] + atomwt[nO]*3.]
compsmolarmass=[compsmolarmass, compsabu*compswt]

;;;>>>>>C as either CO2 or otherwise graphite/kerogen/diamond
compsname=[compsname, 'CO2']
compsabu=planetabuN[nC]
compswt=atomwt[nC] + atomwt[nO]*2.
planetOleft_res2=planetOleft_res - planetabuN[nC]*3.
if planetOleft_res2 le 0 then begin 
compsabu=planetabuN[nC] + planetOleft_res2/3.
print, 'O has been used up after '
print,  compsname
;;C in the form of graphite/diamond
compsname=[compsname, 'C']
compsabuC=planetabuN[nC] - compsabu
compsmolarmass=[compsmolarmass,  compsabu*compswt, compsabuC*atomwt[nC]]
;goto, modelcore
endif else begin 
compsmolarmass=[compsmolarmass, compsabu*compswt]
IF Extramodellable eq 'YES' THEN BEGIN
compsname=[compsname, 'ExtraO']
compsmolarmass=[compsmolarmass, planetOleft_res*atomwt[nO]]
ENDIF
endelse

mantletotalmolarmass=total(compsmolarmass, /nan)
mantlecompsmassfra=compsmolarmass/mantletotalmolarmass


print, 'A CoreLess planet!, with the leftover O atoms of', planetOleft_res2
corecompsname=['N/A']
corecompsmassfra=nan
fcoremass=0.
;Nval=1 ;; valid group of results
goto, chemsysdone
ENDIF ELSE BEGIN
mantlesulfabuarr=sulfmin + (sulfmax-sulfmin)*randomu(seed, Nmc)
mantleNiOabuarr=NiOmin + (NiOmax-NiOmin)*randomu(seed, Nmc)
mantleFeOabuarr=planetOleft - mantleNiOabuarr - mantlesulfabuarr*3. ;; SO2
;stop
;;>>>Validity Control 1. Important!
inval_id1=where(mantleFeOabuarr lt 0.)
if where(inval_id1 eq -1) eq -1 then begin ;;namely, exclude the case inval_id1= -1, namely, not fit to the conditions
mantleFeOabuarr(inval_id1)=nan ;; FeO cannot be negative 
mantleNiOabuarr(inval_id1)=nan ;; the amount of NiO making FeO to be negative is also invalid. 
mantlesulfabuarr(inval_id1)=nan ;; the amount of SO4 making FeO to be negative is also invalid. 
endif
;stop
coreNiabuarr=planetabuN[nNi] - mantleNioabuarr
coreFeabuarr=planetabuN[nFe] - mantleFeOabuarr
coreSabuarr=planetabuN[nS] - mantlesulfabuarr
;;>>>Validity Control 2. Important!
coreFe2Niarr=coreFeabuarr/coreNiabuarr
;stop
inval_id2=where(coreFe2Niarr lt coreFe2NiLL OR coreFe2Niarr gt coreFe2NiUL)
if where(inval_id2 eq -1) eq -1 then begin ;;namely, exclude the case inval_id1= -1, namely, not fit to the conditions
coreFe2Niarr(inval_id2)=nan
;;thus the corresponding abundances are also invalid
coreNiabuarr(inval_id2)=nan
coreFeabuarr(inval_id2)=nan
coreSabuarr(inval_id2)=nan ;; invalid for Fe and Ni, then also mean S is invalid
mantleNiOabuarr(inval_id2)=nan
mantleFeOabuarr(inval_id2)=nan
mantlesulfabuarr(inval_id2)=nan
endif
;stop
;;>>>Validity Control 3. Important!
inval_id3=where(coreFeabuarr lt coreSabuarr)
if where(inval_id3 eq -1) eq -1 then begin
coreNiabuarr(inval_id3)=nan
coreFeabuarr(inval_id3)=nan
coreSabuarr(inval_id3)=nan
mantleNiOabuarr(inval_id3)=nan
mantleFeOabuarr(inval_id3)=nan
mantlesulfabuarr(inval_id3)=nan
;stop
endif
;;
val_id=where(finite(mantleFeOabuarr) eq 1, Nval) ;;FeO is the most stable reference as Fe must be present in planetabuN
print, 'Numbers of valid guess for Fe and Ni in the mantle and the core:', Nval, ' of', Nmc

;;extract the valid arrays only 
if Nval eq 0 then begin
mantleFeOabuarrc=nan
mantleNiOabuarrc=nan
mantlesulfabuarrc=nan
coreNiabuarrc=nan
coreFeabuarrc=nan
coreSabuarrc=nan
;;remove all, if no any valid FeO, NiO, sulfite/ates from the uniform dist.
compsmolarmass=replicate(nan, Nlithos)

Nvalc=Nval+1
endif else begin
mantleFeOabuarrc=mantleFeOabuarr(val_id)
mantleNiOabuarrc=mantleNiOabuarr(val_id)
mantlesulfabuarrc=mantlesulfabuarr(val_id)
coreNiabuarrc=coreNiabuarr(val_id)
coreFeabuarrc=coreFeabuarr(val_id)
coreSabuarrc=coreSabuarr(val_id)
Nvalc=Nval
endelse

;;Conver to molar mass
FeOmolarmassarr=mantleFeOabuarrc*(atomwt[nFe]+atomwt[nO])
NiOmolarmassarr=mantleNiOabuarrc*(atomwt[nNi]+atomwt[nO])
sulfmolarmassarr=mantlesulfabuarrc*(atomwt[nS]+atomwt[nO]*3.)
nonLITHOmassarr=[[FeOmolarmassarr], [NiOmolarmassarr], [sulfmolarmassarr]]

coreFemolarmassarr=coreFeabuarrc*atomwt[nFe]
coreNimolarmassarr=coreNiabuarrc*atomwt[nNi]
coreSmolarmassarr=coreSabuarrc*atomwt[nS]
coremolarmass=[[coreFemolarmassarr], [coreNimolarmassarr], [coreSmolarmassarr]]

;;All C in a reduced phase in the mantle
compsabuC=planetabuN[nC]
compsCmolarmass=compsabuC*atomwt[nC]
compsname=[compsname, 'C']
ENDELSE
END
ENDCASE


;;>>>CAL MASS FRACTIONS IN CASE OF ARRAYS
Nmantlecomps=N_ELEMENTS(compsname)
Ncorecomps=N_ELEMENTS(corecompsname)
;
mantlecompsmassfra=make_array(Nmantlecomps, Nvalc, value=nan)
corecompsmassfra=make_array(Ncorecomps, Nvalc, value=nan)
mantlecompsmassSUM=make_array(Nvalc, value=nan)
corecompsmassSUM=make_array(Nvalc, value=nan)
fcoremass=make_array(Nvalc, value=nan)
for i=0, Nval-1 do begin ;;if Nval=0, then no cal 
mantlecompsmassSUM[i]= total([compsmolarmass, reform(nonLITHOmassarr[i,*]), compsCmolarmass], /nan)
corecompsmassSUM[i]= total(reform(coremolarmass[i,*]), /nan)
if mantlecompsmassSUM[i] eq 0 then mantlecompsmassSUM[i]=nan
if corecompsmassSUM[i] eq 0 then corecompsmassSUM[i]=nan
mantlecompsmassfra[*,i] = [compsmolarmass, reform(nonLITHOmassarr[i,*]), compsCmolarmass] /  mantlecompsmassSUM[i]
corecompsmassfra[*,i] = reform(coremolarmass[i,*]) / corecompsmassSUM[i]
;if corecompsmassfra[1,i] gt 0.9 or corecompsmassfra[2,i] gt 0.9 then stop
fcoremass[i] = corecompsmassSUM[i] / (corecompsmassSUM[i] + mantlecompsmassSUM[i])
endfor
goto, chemsysdone

modelcore:
corecompsname=['Fe', 'Ni', 'S']
;corecompsabu=make_array(3, value=nan)
corecompsabu=[planetabuN[nFe], planetabuN[nNi], planetabuN[nS]] ;; in the case no constriants by Ni or S, then all Fe could be in the core, when no FeO in the mantle
;;Validity Control
IF finite(planetabuN[nNi]) eq 1 THEN BEGIN ;;ALL NI into the core, reaching the maximum of Fe and Ni alloy in the core, as well as the possible maximum S in the core (as no O left in mantle, preferably make the three elements into the core to the maximum)
if planetabuN[nFe] gt planetabuN[nNi]*coreFe2NiUL then begin 
corecompsabu[0]=corecompsabu[1]*coreFe2NiUL
metalN=[metalN, planetabuN[nFe]-corecompsabu[0]]
metalwt=[metalwt, atomwt[nFe]]
endif else begin ;;making the maximum Fe under the assumed abundance of Ni
;when within the range of ratio; all Fe and Ni are just present in the core
if planetabuN[nFe] lt planetabuN[nNi]*coreFe2NiLL then begin
corecompsabu[1]=corecompsabu[0]/coreFe2NiLL
metalN=[metalN, planetabuN[nNi]-corecompsabu[1]]
metalwt=[metalwt, atomwt[nNi]]
endif
endelse
ENDIF
corecompswt=[atomwt[nFe], atomwt[nNi], atomwt[nS]]
coremolarmass=corecompsabu*corecompswt

;; IF Extramodellable eq 'YES' THEN BEGIN 
;; coremolarmass=[coremolarmass, SicoreN*atomwt[nSi]]
;; corecompsname=[corecompsname, 'Si']
;; ENDIF
IF SiINcorelable eq 'YES' THEN BEGIN
coremolarmass=[coremolarmass, SinativeN*atomwt[nSi]]
corecompsname=[corecompsname, 'Si']
ENDIF ELSE BEGIN ;;otherwise in mantle as native element
metalN=[metalN, SinativeN]
metalName=[metalName, 'Si']
metalwt=[metalwt, atomwt[nSi]]
ENDELSE


coretotalmolarmass=total(coremolarmass, /nan)
corecompsmassfra=coremolarmass/coretotalmolarmass

;;;;>>>incompleted oxiding case for mantle
;;;;>>>C should always present
compsname=[compsname, 'C']
compsabuC=planetabuN[nC]
compsCmolarmass=compsabuC*atomwt[nC]
compsmolarmass=[compsmolarmass, compsCmolarmass]

IF Extramodellable eq 'YES' THEN BEGIN
metalmass=metalN*metalwt
metalmassSUM=total(metalmass, /nan)
if finite(metalmassSUM) eq 1 then begin
compsmolarmass=[compsmolarmass, metalmassSUM]
compsname=[compsname, 'Metals']
endif
ENDIF

mantletotalmolarmass=total(compsmolarmass, /nan)
mantlecompsmassfra=compsmolarmass/mantletotalmolarmass
;;>>calCMF
fcoremass=coretotalmolarmass/(mantletotalmolarmass + coretotalmolarmass)


chemsysdone: 
;TOC
IF Keyword_set(outinfull) THEN BEGIN
;fullcompsname = ['SiO2', 'CaO', 'Na2O', 'MgO', 'Al2O3', 'FeO', 'NiO', 'SO2', 'CO2', 'C']
;IF secondaryOxidizeslable EQ 'YES' THEN fullcompsname = ['SiO2', 'K2O', 'CaO', 'Na2O', 'MgO', 'Al2O3', 'MnO', 'Cr2O3', 'TiO2', 'P2O5', 'FeO', 'NiO', 'SO2', 'CO2', 'C']
fullcompsname=['SiO2', 'MgO', 'FeO', 'Al2O3', 'CaO', 'Na2O',  'NiO', 'SO3', 'CO2', 'C']
IF Extramodellable eq 'YES' THEN fullcompsname=[fullcompsname, 'Metals', 'ExtraO']

fullcorecompsname=['Fe', 'Ni', 'S']
if SiIncorelable eq 'YES' then fullcorecompsname=[fullcorecompsname, 'Si']


Ncomps=N_ELEMENTS(fullcompsname)
Ncorecomps=n_elements(fullcorecompsname)

sizearr=size(mantlecompsmassfra)
IF sizearr[0] eq 1 THEN BEGIN ;;namely, no arrays for mantle or core
fullmantlecompsmassfra = make_array(Ncomps, value=nan) 
for i=0, Ncomps-1 do begin
if where(compsname eq fullcompsname[i]) ne -1 then fullmantlecompsmassfra[i]=mantlecompsmassfra(where(compsname eq fullcompsname[i]))
endfor
;
fullcorecompsmassfra = make_array(Ncorecomps, value=nan)
for i=0, Ncorecomps-1 do begin
if where(corecompsname eq fullcorecompsname[i]) ne -1 then fullcorecompsmassfra[i]=corecompsmassfra(where(corecompsname eq fullcorecompsname[i]))
;if fullcorecompsmassfra[i] lt 0 then stop
endfor

ENDIF ELSE BEGIN ;; the info of mantle and core is multi-dimensional arrays

fullmantlecompsmassfra = make_array(Ncomps, Nvalc, value=nan)
for i=0, Ncomps-1 do begin
if where(compsname eq fullcompsname[i]) ne -1 then fullmantlecompsmassfra[i,*]=mantlecompsmassfra(where(compsname eq fullcompsname[i]), *)
endfor
;
fullcorecompsmassfra = make_array(Ncorecomps, Nvalc, value=nan)
for i=0, Ncorecomps-1 do begin
if where(corecompsname eq fullcorecompsname[i]) ne -1 then fullcorecompsmassfra[i,*]=corecompsmassfra(where(corecompsname eq fullcorecompsname[i]), *)
endfor
ENDELSE

result={mantlecompsname:fullcompsname, mantlecompsmassfra:fullmantlecompsmassfra, corecompsname:fullcorecompsname, corecompsmassfra:fullcorecompsmassfra, fcoremass:fcoremass, Nval:Nvalc}

;TOC
goto, returnresult
ENDIF

;stop;---------------------------
;Nval=1 ;; for this output, there is only 1 group of results
outputresults:
result={mantlecompsname:compsname, mantlecompsmassfra:mantlecompsmassfra, corecompsname:corecompsname, corecompsmassfra:corecompsmassfra, fcoremass:fcoremass, Nval:Nvalc}

;stop
returnresult:
TOC
return, result

;;______________________________
;TOC
;print, 'excecution done'
END
